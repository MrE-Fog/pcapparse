package ftp

import (
	"testing"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
)

var testFtpUserPacket []byte = []byte{
	0x00, 0x50, 0x56, 0xc0, 0x00, 0x01, 0x00, 0x0c,
	0x29, 0xd8, 0x37, 0x94, 0x08, 0x00, 0x45, 0x00,
	0x00, 0x36, 0x05, 0x7c, 0x40, 0x00, 0x80, 0x06,
	0xdd, 0xe8, 0xc0, 0xa8, 0x4b, 0x0b, 0xc0, 0xa8,
	0x4b, 0x01, 0xc0, 0x3d, 0x00, 0x15, 0xc5, 0x09,
	0xaf, 0xf2, 0x54, 0x37, 0x11, 0x35, 0x50, 0x18,
	0x1f, 0xb4, 0xd4, 0x9b, 0x00, 0x00, 0x55, 0x53,
	0x45, 0x52, 0x20, 0x64, 0x72, 0x5f, 0x65, 0x76,
	0x69, 0x6c, 0x0d, 0x0a,
}
var testFtpSrvResponsePacket []byte = []byte{
	0x00, 0x0c, 0x29, 0xd8, 0x37, 0x94, 0x00, 0x50,
	0x56, 0xc0, 0x00, 0x01, 0x08, 0x00, 0x45, 0x00,
	0x00, 0x4b, 0x8e, 0xca, 0x40, 0x00, 0x40, 0x06,
	0x94, 0x85, 0xc0, 0xa8, 0x4b, 0x01, 0xc0, 0xa8,
	0x4b, 0x0b, 0x00, 0x15, 0xc0, 0x3d, 0x54, 0x37,
	0x11, 0x35, 0xc5, 0x09, 0xb0, 0x00, 0x50, 0x18,
	0x00, 0xe5, 0x8f, 0xf0, 0x00, 0x00, 0x33, 0x33,
	0x31, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x64, 0x72, 0x5f, 0x65, 0x76, 0x69, 0x6c, 0x0d,
	0x0a,
}
var testFtpPasswordPacket []byte = []byte{
	0x00, 0x50, 0x56, 0xc0, 0x00, 0x01, 0x00, 0x0c,
	0x29, 0xd8, 0x37, 0x94, 0x08, 0x00, 0x45, 0x00,
	0x00, 0x35, 0x05, 0x7e, 0x40, 0x00, 0x80, 0x06,
	0xdd, 0xe7, 0xc0, 0xa8, 0x4b, 0x0b, 0xc0, 0xa8,
	0x4b, 0x01, 0xc0, 0x3d, 0x00, 0x15, 0xc5, 0x09,
	0xb0, 0x00, 0x54, 0x37, 0x11, 0x58, 0x50, 0x18,
	0x1f, 0x91, 0xd7, 0xf9, 0x00, 0x00, 0x50, 0x41,
	0x53, 0x53, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x65, 0x0d, 0x0a,
}

func TestGetUserName(t *testing.T) {
	h := NewFtpHandler()
	h.HandlePacket(createIPv4TCPPacket(testFtpUserPacket))
	if len(h.userRequest) != 1 {
		t.Fatalf("Wanted one user got: %v", len(h.userRequest))
	}
	for _, value := range h.userRequest {
		if value != "dr_evil" {
			t.Fatalf("Got user: %s, wanted: dr_evil", value)
		}
	}
}

func TestServerResponse(t *testing.T) {
	h := NewFtpHandler()
	h.HandlePacket(createIPv4TCPPacket(testFtpSrvResponsePacket))
	if len(h.serverResponse) != 1 {
		t.Fatalf("Wanted one server response got: %v", len(h.serverResponse))
	}
}

func TestGetUserPassword(t *testing.T) {
	h := NewFtpHandler()
	h.HandlePacket(createIPv4TCPPacket(testFtpPasswordPacket))
	if len(h.passRequest) != 1 {
		t.Fatalf("Wanted one password request got: %v", len(h.passRequest))
	}
	for _, value := range h.passRequest {
		if value != "minime" {
			t.Fatalf("Got password: %s, wanted: minime", value)
		}
	}
}

func createIPv4TCPPacket(packet []byte) gopacket.Packet {
	return gopacket.NewPacket(packet, layers.LinkTypeEthernet, gopacket.DecodeOptions{Lazy: true, NoCopy: true})

}
